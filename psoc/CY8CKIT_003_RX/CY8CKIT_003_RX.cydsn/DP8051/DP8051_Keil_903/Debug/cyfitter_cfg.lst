C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.lst)
                    - CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.0 Component Pack 3
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.
   8          *
   9          * THIS FILE SHOULD NOT BE MODIFIED.
  10          *
  11          ********************************************************************************
  12          * Copyright 2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include <cytypes.h>
  20          #include <cydevice_trm.h>
  21          #include <cyfitter.h>
  22          #include <CyLib.h>
  23          #include <CyDmac.h>
  24          #include <cyfitter_cfg.h>
  25          
  26          /* Clock startup error codes                                                   */
  27          #define CYCLOCKSTART_NO_ERROR    0
  28          #define CYCLOCKSTART_XTAL_ERROR  1
  29          #define CYCLOCKSTART_32KHZ_ERROR 2
  30          #define CYCLOCKSTART_PLL_ERROR   3
  31          
  32          /*******************************************************************************
  33          * Function Name: CyClockStartupError
  34          ********************************************************************************
  35          * Summary:
  36          *  If an error is encountered during clock configuration (crystal startup error,
  37          *  PLL lock error, etc) the system will end up here.  Unless reimplemented by 
  38          *  the customer, an infinite loop will be encountered.
  39          *
  40          * Parameters:  
  41          *   void
  42          *
  43          * Return:
  44          *   void
  45          *
  46          *******************************************************************************/
  47          #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
  50          static void CyClockStartupError(uint8 errorCode)
  51          {
  52   1          /* To remove the compiler warning if errorCode not used.                */
  53   1          errorCode = errorCode;
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 2   

  54   1      
  55   1          /* `#START CyClockStartupError` */
  56   1      
  57   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc)    */
  58   1          /* we will end up here to allow the customer to implement something to  */
  59   1          /* deal with the clock condition.                                       */
  60   1      
  61   1          /* `#END` */
  62   1      
  63   1          /* If nothing else, stop here since the clocks have not started         */
  64   1          /* correctly.                                                           */
  65   1          while(1) {}
  66   1      }
  67          
  68          
  69          #undef CYCODE
  70          #undef CYDATA
  71          #undef CYXDATA
  72          #undef CYFAR
  73          #if defined(__C51__) || defined(__CX51__)
  74                  #define CYCODE code
  75                  #define CYDATA data
  76                  #define CYXDATA xdata
  77                  #define CYFAR far
  78          
  79                  #define CYPACKED
  80                  #define CYALIGNED
  81              #define DMAINITSEC
  82                  #define CY_CFG_MEMORY_BARRIER()
  83          
  84                  #ifndef CYCONFIGCPY_DECLARED
                              extern void cymemzero(void CYFAR *addr, uint16 size);
                              extern void cyconfigcpy(uint16 size, const void CYFAR *src, void CYFAR *dest) small;
                              extern void cyconfigcpycode(uint16 size, const void CYCODE *src, void CYFAR *dest);
                      #endif
  89          
  90          
  91                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  92                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  93                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  94          #else
                      #error Unsupported toolchain
              #endif
  97          
  98          /* Defines the layout and meaning of each entry in the cfg_memset_list used for clearing registers */
  99          typedef struct {
 100                  void CYFAR *address;
 101                  uint16 size;
 102          } CYPACKED cfg_memset_t;
 103          
 104          /* Defines the layout and meaning of each entry in the cfg_memcpy_list used for initializing registers */
 105          typedef struct {
 106                  void CYFAR *dest;
 107                  const void CYFAR *src;
 108                  uint16 size;
 109          } CYPACKED cfg_memcpy_t;
 110          
 111          /* TD structure for big-endian systems. Requires 2-byte endian swap */
 112          struct td_t {
 113                  uint16 size;
 114                  uint8 flags;
 115                  uint8 next_td_ptr;
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 3   

 116                  uint16 src;
 117                  uint16 dest;
 118          } CYPACKED;
 119          
 120          /* IOPORT_2 Address: CYDEV_PRTDSI_PRT2_BASE Size (bytes): 7 */
 121          #define BS_IOPORT_2_VAL ((const uint8 CYFAR *)0x00080000)
 122          
 123          /* IOPORT_4 Address: CYDEV_PRTDSI_PRT4_BASE Size (bytes): 7 */
 124          #define BS_IOPORT_4_VAL ((const uint8 CYFAR *)0x00080008)
 125          
 126          /* IOPORT_7 Address: CYDEV_PRTDSI_PRT12_BASE Size (bytes): 6 */
 127          #define BS_IOPORT_7_VAL ((const uint8 CYFAR *)0x00080010)
 128          
 129          /* IOPORT_8 Address: CYDEV_PRTDSI_PRT15_BASE Size (bytes): 7 */
 130          #define BS_IOPORT_8_VAL ((const uint8 CYFAR *)0x00080018)
 131          
 132          /* UDB_0_2_1_CONFIG Address: CYDEV_UCFG_B0_P4_U0_BASE Size (bytes): 128 */
 133          #define BS_UDB_0_2_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080020)
 134          
 135          /* UDB_0_4_1_CONFIG Address: CYDEV_UCFG_B0_P6_U0_BASE Size (bytes): 128 */
 136          #define BS_UDB_0_4_1_CONFIG_VAL ((const uint8 CYFAR *)0x000800A0)
 137          
 138          /* UDB_0_4_0_CONFIG Address: CYDEV_UCFG_B0_P6_U1_BASE Size (bytes): 128 */
 139          #define BS_UDB_0_4_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080120)
 140          
 141          /* UDB_0_1_1_CONFIG Address: CYDEV_UCFG_B1_P4_U0_BASE Size (bytes): 128 */
 142          #define BS_UDB_0_1_1_CONFIG_VAL ((const uint8 CYFAR *)0x000801A0)
 143          
 144          /* UDB_0_1_0_CONFIG Address: CYDEV_UCFG_B1_P4_U1_BASE Size (bytes): 128 */
 145          #define BS_UDB_0_1_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080220)
 146          
 147          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070 Size (bytes): 32 */
 148          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)0x000802A0)
 149          
 150          /* DSISWITCH_0_0 Address: CYDEV_UCFG_DSI13_BASE Size (bytes): 128 */
 151          #define BS_DSISWITCH_0_0_VAL ((const uint8 CYFAR *)0x000802C0)
 152          
 153          /* DSI0_0_HV_ROUTING Address: CYDEV_UCFG_DSI13_BASE + 0x00000080 Size (bytes): 128 */
 154          #define BS_DSI0_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080340)
 155          
 156          /* DSISWITCH_0_1 Address: CYDEV_UCFG_DSI12_BASE Size (bytes): 128 */
 157          #define BS_DSISWITCH_0_1_VAL ((const uint8 CYFAR *)0x000803C0)
 158          
 159          /* DSI0_1_HV_ROUTING Address: CYDEV_UCFG_DSI12_BASE + 0x00000080 Size (bytes): 128 */
 160          #define BS_DSI0_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080440)
 161          
 162          /* DSI0_3_HV_ROUTING Address: CYDEV_UCFG_DSI6_BASE + 0x00000080 Size (bytes): 128 */
 163          #define BS_DSI0_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000804C0)
 164          
 165          /* DSISWITCH_0_4 Address: CYDEV_UCFG_DSI5_BASE Size (bytes): 128 */
 166          #define BS_DSISWITCH_0_4_VAL ((const uint8 CYFAR *)0x00080540)
 167          
 168          /* DSI0_4_HV_ROUTING Address: CYDEV_UCFG_DSI5_BASE + 0x00000080 Size (bytes): 128 */
 169          #define BS_DSI0_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000805C0)
 170          
 171          /* UDB_1_0_HV_ROUTING Address: CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 172          #define BS_UDB_1_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080640)
 173          
 174          /* UDBSWITCH_0_1 Address: CYDEV_UCFG_B1_P4_ROUTE_BASE Size (bytes): 128 */
 175          #define BS_UDBSWITCH_0_1_VAL ((const uint8 CYFAR *)0x000806C0)
 176          
 177          /* UDB_1_1_HV_ROUTING Address: CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 4   

 178          #define BS_UDB_1_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080740)
 179          
 180          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 181          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000807C0)
 182          
 183          /* UDBSWITCH_0_2 Address: CYDEV_UCFG_B0_P4_ROUTE_BASE Size (bytes): 128 */
 184          #define BS_UDBSWITCH_0_2_VAL ((const uint8 CYFAR *)0x00080840)
 185          
 186          /* UDB_1_2_HV_ROUTING Address: CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 187          #define BS_UDB_1_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000808C0)
 188          
 189          /* UDB_1_3_HV_ROUTING Address: CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 190          #define BS_UDB_1_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080940)
 191          
 192          /* UDB_2_3_HV_ROUTING Address: CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 193          #define BS_UDB_2_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000809C0)
 194          
 195          /* UDBSWITCH_0_4 Address: CYDEV_UCFG_B0_P6_ROUTE_BASE Size (bytes): 128 */
 196          #define BS_UDBSWITCH_0_4_VAL ((const uint8 CYFAR *)0x00080A40)
 197          
 198          /* UDB_1_4_HV_ROUTING Address: CYDEV_UCFG_B0_P6_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 199          #define BS_UDB_1_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080AC0)
 200          
 201          /* UDB_2_4_HV_ROUTING Address: CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 202          #define BS_UDB_2_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080B40)
 203          
 204          /* UDB_1_5_HV_ROUTING Address: CYDEV_UCFG_B0_P7_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 205          #define BS_UDB_1_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080BC0)
 206          
 207          /* UDB_2_5_HV_ROUTING Address: CYDEV_UCFG_B0_P0_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 208          #define BS_UDB_2_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080C40)
 209          
 210          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 211          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)0x00080CC0)
 212          
 213          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080 Size (bytes): 128 */
 214          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080D40)
 215          
 216          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080 Size (bytes): 128 */
 217          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080DC0)
 218          
 219          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080 Size (bytes): 128 */
 220          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080E40)
 221          
 222          /* DSI3_3_HV_ROUTING Address: CYDEV_UCFG_DSI2_BASE + 0x00000080 Size (bytes): 128 */
 223          #define BS_DSI3_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080EC0)
 224          
 225          /* DSI3_4_HV_ROUTING Address: CYDEV_UCFG_DSI1_BASE + 0x00000080 Size (bytes): 128 */
 226          #define BS_DSI3_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080F40)
 227          
 228          /* DSISWITCH_1_5 Address: CYDEV_UCFG_DSI0_BASE Size (bytes): 128 */
 229          #define BS_DSISWITCH_1_5_VAL ((const uint8 CYFAR *)0x00080FC0)
 230          
 231          /* DSI3_5_HV_ROUTING Address: CYDEV_UCFG_DSI0_BASE + 0x00000080 Size (bytes): 128 */
 232          #define BS_DSI3_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00081040)
 233          
 234          /* UCFG_BCTL1 Address: CYREG_BCTL1_MDCLK_EN Size (bytes): 16 */
 235          #define BS_UCFG_BCTL1_VAL ((const uint8 CYFAR *)0x000810C0)
 236          
 237          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
 238          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)0x000810D0)
 239          
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 5   

 240          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 241          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x000810E0)
 242          
 243          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 244          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x000810E8)
 245          
 246          /* IOPINS0_7 Address: CYREG_PRT12_DM0 Size (bytes): 8 */
 247          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)0x000810F0)
 248          
 249          /* IOPINS0_8 Address: CYREG_PRT15_DM0 Size (bytes): 8 */
 250          #define BS_IOPINS0_8_VAL ((const uint8 CYFAR *)0x000810F8)
 251          
 252          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 253          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00081100)
 254          
 255          /* IOPINS0_4 Address: CYREG_PRT4_DM0 Size (bytes): 8 */
 256          #define BS_IOPINS0_4_VAL ((const uint8 CYFAR *)0x00081108)
 257          
 258          /* IOPINS0_5 Address: CYREG_PRT5_DM0 Size (bytes): 8 */
 259          #define BS_IOPINS0_5_VAL ((const uint8 CYFAR *)0x00081110)
 260          
 261          
 262          /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 263          static const uint8 CYCODE CH1_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
             -;
 264          
 265          /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 266          static const uint8 CYCODE CH2_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 }
             -;
 267          
 268          /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 269          static const uint8 CYCODE CH5_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 }
             -;
 270          
 271          /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 272          static const uint8 CYCODE CH6_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00 }
             -;
 273          
 274          /* Initialization data for each DMA channel's TD registers */
 275          static const uint8 CYCODE DMA_TD_START_CMD[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x01 };
 276          
 277          static uint32 CYXDATA DMA_ZERO_VAL CYALIGNED;
 278          
 279          /* This table holds all of the initialization data necessary for the DMA
 280             process to transfer data from the source location to the destination. */
 281          static const struct td_t CYCODE CFG_TD_LIST0[] DMAINITSEC = {
 282          /* Size, Flags, Next, Source, Destination */
 283                  { 8, 0x23, 0x02, (uint16)(&CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },        /* TD 1 */
 284                  { 8, 0x23, 0x03, (uint16)(&CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },        /* TD 2 */
 285                  { 8, 0x23, 0x04, (uint16)(&CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },        /* TD 3 */
 286                  { 8, 0x23, 0x05, (uint16)(&CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },        /* TD 4 */
 287                  { 5, 0x23, 0x06, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },     /* TD 5 */
 288                  { 5, 0x23, 0x07, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },     /* TD 6 */
 289                  { 5, 0x23, 0x08, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },     /* TD 7 */
 290                  { 5, 0x23, 0xFE, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },     /* TD 8 */
 291                  { 16, 0x22, 0x0A, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },   /* TD 9 */
 292                  { 16, 0x22, 0xFE, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT6_DR) },   /* TD 10 */
 293                  { 384, 0x22, 0x0C, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },       /* TD 11 */
 294                  { 384, 0x22, 0x0D, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P1_U0_BASE) },       /* TD 12 */
 295                  { 384, 0x22, 0x0E, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P2_U0_BASE) },       /* TD 13 */
 296                  { 512, 0x22, 0x0F, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },       /* TD 14 */
 297                  { 128, 0x22, 0x10, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P4_U1_BASE) },       /* TD 15 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 6   

 298                  { 384, 0x22, 0x11, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P5_U0_BASE) },       /* TD 16 */
 299                  { 384, 0x22, 0x12, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P7_U0_BASE) },       /* TD 17 */
 300                  { 896, 0x22, 0x13, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },       /* TD 18 */
 301                  { 384, 0x22, 0x14, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P5_U0_BASE) },       /* TD 19 */
 302                  { 128, 0x22, 0x15, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE) },   /* TD 20 */
 303                  { 128, 0x22, 0x16, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) },   /* TD 21 */
 304                  { 128, 0x22, 0x17, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) },   /* TD 22 */
 305                  { 256, 0x22, 0x18, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) },   /* TD 23 */
 306                  { 128, 0x22, 0x19, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE) },   /* TD 24 */
 307                  { 384, 0x22, 0xFE, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE) },   /* TD 25 */
 308                  { 7, 0x23, 0x1B, (uint16)(BS_IOPORT_2_VAL), (uint16)(CYDEV_PRTDSI_PRT2_BASE) }, /* TD 26 */
 309                  { 7, 0x23, 0x1C, (uint16)(BS_IOPORT_4_VAL), (uint16)(CYDEV_PRTDSI_PRT4_BASE) }, /* TD 27 */
 310                  { 6, 0x23, 0x1D, (uint16)(BS_IOPORT_7_VAL), (uint16)(CYDEV_PRTDSI_PRT12_BASE) },        /* TD 28 */
 311                  { 7, 0x23, 0x1E, (uint16)(BS_IOPORT_8_VAL), (uint16)(CYDEV_PRTDSI_PRT15_BASE) },        /* TD 29 */
 312                  { 32, 0x23, 0xFE, (uint16)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BASE + 0x000000
             -70) },        /* TD 30 */
 313                  { 128, 0x23, 0x20, (uint16)(BS_UDB_0_2_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P4_U0_BASE) },     /* TD 31 */
 314                  { 128, 0x23, 0x21, (uint16)(BS_UDB_0_4_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P6_U0_BASE) },     /* TD 32 */
 315                  { 128, 0x23, 0x22, (uint16)(BS_UDB_0_4_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P6_U1_BASE) },     /* TD 33 */
 316                  { 128, 0x23, 0x23, (uint16)(BS_UDB_0_1_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },     /* TD 34 */
 317                  { 128, 0x23, 0x24, (uint16)(BS_UDB_0_1_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P4_U1_BASE) },     /* TD 35 */
 318                  { 128, 0x23, 0x25, (uint16)(BS_DSISWITCH_0_0_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE) },   /* TD 36 */
 319                  { 128, 0x23, 0x26, (uint16)(BS_DSI0_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE + 0x00000080) },  /*
             - TD 37 */
 320                  { 128, 0x23, 0x27, (uint16)(BS_DSISWITCH_0_1_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },   /* TD 38 */
 321                  { 128, 0x23, 0x28, (uint16)(BS_DSI0_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE + 0x00000080) },  /*
             - TD 39 */
 322                  { 128, 0x23, 0x29, (uint16)(BS_DSI0_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE + 0x00000080) },   /* 
             -TD 40 */
 323                  { 128, 0x23, 0x2A, (uint16)(BS_DSISWITCH_0_4_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE) },    /* TD 41 */
 324                  { 128, 0x23, 0x2B, (uint16)(BS_DSI0_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE + 0x00000080) },   /* 
             -TD 42 */
 325                  { 128, 0x23, 0x2C, (uint16)(BS_UDB_1_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080
             -) },        /* TD 43 */
 326                  { 128, 0x23, 0x2D, (uint16)(BS_UDBSWITCH_0_1_VAL), (uint16)(CYDEV_UCFG_B1_P4_ROUTE_BASE) },     /* TD 44 */
 327                  { 128, 0x23, 0x2E, (uint16)(BS_UDB_1_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080
             -) },        /* TD 45 */
 328                  { 128, 0x23, 0x2F, (uint16)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080
             -) },        /* TD 46 */
 329                  { 128, 0x23, 0x30, (uint16)(BS_UDBSWITCH_0_2_VAL), (uint16)(CYDEV_UCFG_B0_P4_ROUTE_BASE) },     /* TD 47 */
 330                  { 128, 0x23, 0x31, (uint16)(BS_UDB_1_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080
             -) },        /* TD 48 */
 331                  { 128, 0x23, 0x32, (uint16)(BS_UDB_1_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x00000080
             -) },        /* TD 49 */
 332                  { 128, 0x23, 0x33, (uint16)(BS_UDB_2_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080
             -) },        /* TD 50 */
 333                  { 128, 0x23, 0x34, (uint16)(BS_UDBSWITCH_0_4_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE) },     /* TD 51 */
 334                  { 128, 0x23, 0x35, (uint16)(BS_UDB_1_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE + 0x00000080
             -) },        /* TD 52 */
 335                  { 128, 0x23, 0x36, (uint16)(BS_UDB_2_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080
             -) },        /* TD 53 */
 336                  { 128, 0x23, 0x37, (uint16)(BS_UDB_1_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE + 0x00000080
             -) },        /* TD 54 */
 337                  { 128, 0x23, 0x38, (uint16)(BS_UDB_2_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P0_ROUTE_BASE + 0x00000080
             -) },        /* TD 55 */
 338                  { 128, 0x23, 0x39, (uint16)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) },    /* TD 56 */
 339                  { 128, 0x23, 0x3A, (uint16)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x00000080) },   /* 
             -TD 57 */
 340                  { 128, 0x23, 0x3B, (uint16)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x00000080) },   /* 
             -TD 58 */
 341                  { 128, 0x23, 0x3C, (uint16)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x00000080) },   /* 
             -TD 59 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 7   

 342                  { 128, 0x23, 0x3D, (uint16)(BS_DSI3_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE + 0x00000080) },   /* 
             -TD 60 */
 343                  { 128, 0x23, 0x3E, (uint16)(BS_DSI3_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE + 0x00000080) },   /* 
             -TD 61 */
 344                  { 128, 0x23, 0x3F, (uint16)(BS_DSISWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) },    /* TD 62 */
 345                  { 128, 0x23, 0x40, (uint16)(BS_DSI3_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE + 0x00000080) },   /* 
             -TD 63 */
 346                  { 16, 0x23, 0x41, (uint16)(BS_UCFG_BCTL1_VAL), (uint16)(CYREG_BCTL1_MDCLK_EN) },        /* TD 64 */
 347                  { 16, 0x23, 0xFE, (uint16)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },        /* TD 65 */
 348          };
 349          /*******************************************************************************
 350          * Function Name: cfg_dma_init
 351          ********************************************************************************
 352          * Summary:
 353          *  This function is used to copy device configuration data from constant values
 354          *  stored in memory into the proper chip configuration registers using DMA.  It
 355          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 356          *
 357          * Parameters:  
 358          *   void
 359          *
 360          * Return:
 361          *   void
 362          *
 363          *******************************************************************************/
 364          static void cfg_dma_init(void)
 365          {
 366   1              DMA_ZERO_VAL = 0u;
 367   1              DMAC_CFGMEM[0].CFG0[0] = 0x10;          /* set burstcount */
 368   1              DMAC_CH[0].basic_cfg[0] = 0x01u;        /* enable channel0 */
 369   1              DMAC_CH[0].basic_status[1] = 0;         /* set channel0's first td to 0 */
 370   1              
 371   1              DMAC_TDMEM[0].TD0[2] = 0x01;            /* set td0's next td to 1 */
 372   1              DMAC_TDMEM[0].TD0[3] = 0xA3;            /* set td0's flags */
 373   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD0[0], 65*8);                                    /* set td0's size */
 374   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[0], (uint16)(uint32)CFG_TD_LIST0);    /* set td0's src addr */
 375   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[2], CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst addr */
 376   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[0], (uint16)(CYDEV_FLS_BASE >> 16));                                /* set ch0's src high
             - addr */
 377   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[2], (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));                                /* set ch0's 
             -dst high addr */
 378   1              DMAC_CH[1].basic_status[1] = 0x09; /* First TD = 9 */
 379   1              DMAC_CH[2].basic_status[1] = 0x0B; /* First TD = 11 */
 380   1              DMAC_CH[5].basic_status[1] = 0x1A; /* First TD = 26 */
 381   1              DMAC_CH[6].basic_status[1] = 0x1F; /* First TD = 31 */
 382   1      
 383   1              CY_CFG_MEMORY_BARRIER();
 384   1              DMAC_CH[0].action[0] = CPU_REQ;    /* initiate the DMA transfer */
 385   1              CY_CFG_MEMORY_BARRIER();
 386   1      
 387   1              /* Wait for all DMA transfers to complete */
 388   1              while((CY_GET_REG8(CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 389   1              while((CY_GET_REG8(CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 390   1              while((CY_GET_REG8(CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 391   1              while((CY_GET_REG8(CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 392   1              while((CY_GET_REG8(CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 393   1      
 394   1      
 395   1      }
 396          /*******************************************************************************
 397          * Function Name: ClockSetup
 398          ********************************************************************************
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 8   

 399          *
 400          * Summary:
 401          *  Performs the initialization of all of the clocks in the device based on the
 402          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 403          *  clocks and setting the necessary dividers to produce the desired frequency. 
 404          *
 405          * Parameters:
 406          *  void
 407          *
 408          * Return:
 409          *  void
 410          *
 411          *******************************************************************************/
 412          static void ClockSetup(void)
 413          {
 414   1              reg32  timeout;
 415   1              reg32* timeout_p = &timeout;
 416   1              reg8   pllLock;
 417   1      
 418   1      
 419   1              /* Configure Digital Clocks based on settings from Clock DWR */
 420   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x18000B);
 421   1      
 422   1              /* Configure ILO based on settings from Clock DWR */
 423   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02);
 424   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08);
 425   1      
 426   1              /* Configure IMO based on settings from Clock DWR */
 427   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03);
 428   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8(CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)));
 429   1      
 430   1              /* Configure PLL based on settings from Clock DWR */
 431   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008);
 432   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051);
 433   1              /* Wait up to 250us for the PLL to lock */
 434   1              pllLock = 0;
 435   1              for (timeout = 250 / 10; *timeout_p && (pllLock != 0x03u); timeout--) { 
 436   2                      pllLock = 0x03u & ((pllLock << 1) | ((CY_GET_REG8(CYREG_FASTCLK_PLL_SR) & 0x01u) >> 0));
 437   2                      CyDelayCycles(10 * 48); /* Delay 10us based on 48MHz clock */
 438   2              }
 439   1      
 440   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 441   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0103);
 442   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 443   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07);
 444   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00);
 445   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48);
 446   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 447   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02);
 448   1      
 449   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8(CYREG_PM_ACT_CFG2) | 0x01)));
 450   1      }
 451          
 452          
 453          /* Analog API Functions */
 454          
 455          /*******************************************************************************
 456          * Function Name: AnalogSetDefault
 457          ********************************************************************************
 458          *
 459          * Summary:
 460          *  Sets up the analog portions of the chip to default values based on chip
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 9   

 461          *  configuration options from the project.
 462          *
 463          * Parameters:
 464          *  void
 465          *
 466          * Return:
 467          *  void
 468          *
 469          *******************************************************************************/
 470          void AnalogSetDefault(void)
 471          {
 472   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u);
 473   1              CY_SET_REG8(CYREG_BG_DFT0, bg_xover_inl_trim & 0x07u);
 474   1              CY_SET_REG8(CYREG_BG_DFT1, (bg_xover_inl_trim >> 4) & 0x0Fu);
 475   1              CY_SET_REG8(CYREG_PUMP_CR0, 0x44);
 476   1      }
 477          
 478          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 479          
 480          
 481          /*******************************************************************************
 482          * Function Name: cyfitter_cfg
 483          ********************************************************************************
 484          * Summary:
 485          *  This function is called by the start-up code for the selected device. It
 486          *  performs all of the necessary device configuration based on the design
 487          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 488          *  as Clocks and Pins as well as any component configuration that is necessary.
 489          *
 490          * Parameters:  
 491          *   void
 492          *
 493          * Return:
 494          *   void
 495          *
 496          *******************************************************************************/
 497          void cyfitter_cfg(void)
 498          {
 499   1              /* Setup Flash Cycles based on 48MHz clock startup frequency. */
 500   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0xF1 : 0xC0));
 501   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 502   1              CY_SET_XTND_REG8(CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8(CYREG_MLOGIC_DEBUG) | 0x05));
 503   1      
 504   1              {
 505   2                      cfg_dma_init();
 506   2      
 507   2                      /* Enable digital routing */
 508   2                      CY_SET_XTND_REG8(CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL0_BANK_CTL) | 0x02u);
 509   2                      CY_SET_XTND_REG8(CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL1_BANK_CTL) | 0x02u);
 510   2      
 511   2                      /* Enable UDB array */
 512   2                      CY_SET_REG8(CYREG_PM_ACT_CFG0, CY_GET_REG8(CYREG_PM_ACT_CFG0) | 0x40u);
 513   2                      CY_SET_REG8(CYREG_PM_AVAIL_CR2, CY_GET_REG8(CYREG_PM_AVAIL_CR2) | 0x10u);
 514   2              }
 515   1      
 516   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 517   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (void CYFAR *)(BS_IOPINS0_0_VAL), 8);
 518   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (void CYFAR *)(BS_IOPINS0_1_VAL), 8);
 519   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DM0), (void CYFAR *)(BS_IOPINS0_7_VAL), 8);
 520   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT15_DM0), (void CYFAR *)(BS_IOPINS0_8_VAL), 8);
 521   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (void CYFAR *)(BS_IOPINS0_2_VAL), 8);
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 10  

 522   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT4_DM0), (void CYFAR *)(BS_IOPINS0_4_VAL), 8);
 523   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT5_DM0), (void CYFAR *)(BS_IOPINS0_5_VAL), 8);
 524   1              CY_SET_REG8((void CYXDATA *)(CYREG_PWRSYS_WAKE_TR2), 0x3A);
 525   1      
 526   1      
 527   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 528   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0x31 : 0x00));
 529   1              /* Setup clocks based on selections from Clock DWR */
 530   1              ClockSetup();
 531   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 532   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0xB1 : 0x80));
 533   1      
 534   1              /* Perform basic analog initialization to defaults */
 535   1              AnalogSetDefault();
 536   1      
 537   1              /* Configure alternate active mode */
 538   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (void CYFAR *)CYDEV_PM_ACT_BASE, 14);
 539   1              CY_SET_REG8(CYREG_PM_STBY_CFG0, CY_GET_REG8(CYREG_PM_STBY_CFG0) & ~0x02u);      /* Disable CPU */
 540   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 50
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 65
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 366
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 367
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
001F 907802            MOV     DPTR,#07802H
0022 7401              MOV     A,#01H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0025 907803            MOV     DPTR,#07803H
0028 74A3              MOV     A,#0A3H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
002B 7B02              MOV     R3,#02H
002D 7A78              MOV     R2,#078H
002F 7900              MOV     R1,#00H
0031 7D08              MOV     R5,#08H
0033 7C02              MOV     R4,#02H
0035 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 374
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 12  

003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AC02              MOV     R4,AR2
004C AD01              MOV     R5,AR1
004E D001              POP     AR1
0050 D002              POP     AR2
0052 D003              POP     AR3
0054 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 375
0057 7B02              MOV     R3,#02H
0059 7A78              MOV     R2,#078H
005B 7906              MOV     R1,#06H
005D 7D08              MOV     R5,#08H
005F 7C78              MOV     R4,#078H
0061 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 376
0064 7B02              MOV     R3,#02H
0066 7A76              MOV     R2,#076H
0068 7904              MOV     R1,#04H
006A 7D10              MOV     R5,#010H
006C 7C00              MOV     R4,#00H
006E 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 377
0071 7B02              MOV     R3,#02H
0073 7A76              MOV     R2,#076H
0075 7906              MOV     R1,#06H
0077 7D00              MOV     R5,#00H
0079 7C00              MOV     R4,#00H
007B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 378
007E 907029            MOV     DPTR,#07029H
0081 7409              MOV     A,#09H
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0084 907039            MOV     DPTR,#07039H
0087 740B              MOV     A,#0BH
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
008A 907069            MOV     DPTR,#07069H
008D 741A              MOV     A,#01AH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
0090 907079            MOV     DPTR,#07079H
0093 741F              MOV     A,#01FH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 384
0096 907014            MOV     DPTR,#07014H
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
009C         ?C0004:
                                           ; SOURCE LINE # 388
009C 907018            MOV     DPTR,#07018H
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 20E0F7            JB      ACC.0,?C0004
00A5         ?C0005:
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 13  

00A5         ?C0006:
                                           ; SOURCE LINE # 389
00A5 907028            MOV     DPTR,#07028H
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB 20E0F7            JB      ACC.0,?C0006
00AE         ?C0007:
00AE         ?C0008:
                                           ; SOURCE LINE # 390
00AE 907038            MOV     DPTR,#07038H
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 20E0F7            JB      ACC.0,?C0008
00B7         ?C0009:
00B7         ?C0010:
                                           ; SOURCE LINE # 391
00B7 907068            MOV     DPTR,#07068H
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC EF                MOV     A,R7
00BD 20E0F7            JB      ACC.0,?C0010
00C0         ?C0011:
00C0         ?C0012:
                                           ; SOURCE LINE # 392
00C0 907078            MOV     DPTR,#07078H
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 EF                MOV     A,R7
00C6 20E0F7            JB      ACC.0,?C0012
00C9         ?C0013:
                                           ; SOURCE LINE # 395
00C9         ?C0014:
00C9 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 415
0000 7E00        R     MOV     R6,#HIGH timeout
0002 7F00        R     MOV     R7,#LOW timeout
0004 900000      R     MOV     DPTR,#timeout_p
0007 EE                MOV     A,R6
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
000C 7B00              MOV     R3,#00H
000E 7A40              MOV     R2,#040H
0010 7980              MOV     R1,#080H
0012 7F0B              MOV     R7,#0BH
0014 7E00              MOV     R6,#00H
0016 7D18              MOV     R5,#018H
0018 7C00              MOV     R4,#00H
001A 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 423
001D 904300            MOV     DPTR,#04300H
0020 7402              MOV     A,#02H
0022 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 14  

                                           ; SOURCE LINE # 424
0023 904000            MOV     DPTR,#04000H
0026 7408              MOV     A,#08H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0029 904200            MOV     DPTR,#04200H
002C 7403              MOV     A,#03H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
002F 7B0C              MOV     R3,#0CH
0031 7A01              MOV     R2,#01H
0033 7908              MOV     R1,#08H
0035 120000      E     LCALL   _cyread8
0038 9046A1            MOV     DPTR,#046A1H
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
003D 7B00              MOV     R3,#00H
003F 7A42              MOV     R2,#042H
0041 7922              MOV     R1,#022H
0043 7D08              MOV     R5,#08H
0045 7C00              MOV     R4,#00H
0047 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 432
004A 7B00              MOV     R3,#00H
004C 7A42              MOV     R2,#042H
004E 7920              MOV     R1,#020H
0050 7D51              MOV     R5,#051H
0052 7C10              MOV     R4,#010H
0054 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 434
0057 900000      R     MOV     DPTR,#pllLock
005A E4                CLR     A
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 435
005C 7F19              MOV     R7,#019H
005E 7E00              MOV     R6,#00H
0060 7D00              MOV     R5,#00H
0062 7C00              MOV     R4,#00H
0064 900000      R     MOV     DPTR,#timeout
0067 120000      E     LCALL   ?C?LSTXDATA
006A         ?C0015:
006A 900000      R     MOV     DPTR,#timeout_p
006D E0                MOVX    A,@DPTR
006E FE                MOV     R6,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 8F82              MOV     DPL,R7
0074 8E83              MOV     DPH,R6
0076 120000      E     LCALL   ?C?LLDXDATA
0079 EC                MOV     A,R4
007A 4D                ORL     A,R5
007B 4E                ORL     A,R6
007C 4F                ORL     A,R7
007D 604E              JZ      ?C0016
007F 900000      R     MOV     DPTR,#pllLock
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 6403              XRL     A,#03H
0087 6044              JZ      ?C0016
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 15  

                                           ; SOURCE LINE # 436
0089 904225            MOV     DPTR,#04225H
008C E0                MOVX    A,@DPTR
008D FF                MOV     R7,A
008E EF                MOV     A,R7
008F 5401              ANL     A,#01H
0091 FF                MOV     R7,A
0092 7E00              MOV     R6,#00H
0094 900000      R     MOV     DPTR,#pllLock
0097 E0                MOVX    A,@DPTR
0098 FE                MOV     R6,A
0099 EE                MOV     A,R6
009A 25E0              ADD     A,ACC
009C FE                MOV     R6,A
009D EE                MOV     A,R6
009E 4F                ORL     A,R7
009F FF                MOV     R7,A
00A0 EF                MOV     A,R7
00A1 5403              ANL     A,#03H
00A3 FF                MOV     R7,A
00A4 900000      R     MOV     DPTR,#pllLock
00A7 EF                MOV     A,R7
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
00A9 7FE0              MOV     R7,#0E0H
00AB 7E01              MOV     R6,#01H
00AD 7D00              MOV     R5,#00H
00AF 7C00              MOV     R4,#00H
00B1 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 438
00B4 900000      R     MOV     DPTR,#timeout
00B7 120000      E     LCALL   ?C?LLDXDATA
00BA 7BFF              MOV     R3,#0FFH
00BC 7AFF              MOV     R2,#0FFH
00BE 79FF              MOV     R1,#0FFH
00C0 78FF              MOV     R0,#0FFH
00C2 120000      E     LCALL   ?C?LADD
00C5 900000      R     MOV     DPTR,#timeout
00C8 120000      E     LCALL   ?C?LSTXDATA
00CB 809D              SJMP    ?C0015
00CD         ?C0016:
                                           ; SOURCE LINE # 441
00CD 7B00              MOV     R3,#00H
00CF 7A40              MOV     R2,#040H
00D1 7904              MOV     R1,#04H
00D3 7D03              MOV     R5,#03H
00D5 7C01              MOV     R4,#01H
00D7 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 442
00DA 904004            MOV     DPTR,#04004H
00DD E4                CLR     A
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
00DF 904004            MOV     DPTR,#04004H
00E2 7407              MOV     A,#07H
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
00E5 904006            MOV     DPTR,#04006H
00E8 E4                CLR     A
00E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
00EA 904008            MOV     DPTR,#04008H
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 16  

00ED 7448              MOV     A,#048H
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
00F0 904004            MOV     DPTR,#04004H
00F3 E4                CLR     A
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
00F5 904001            MOV     DPTR,#04001H
00F8 7402              MOV     A,#02H
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
00FB 9043A2            MOV     DPTR,#043A2H
00FE E0                MOVX    A,@DPTR
00FF FF                MOV     R7,A
0100 EF                MOV     A,R7
0101 4401              ORL     A,#01H
0103 FF                MOV     R7,A
0104 EF                MOV     A,R7
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
0106 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 17  

                                           ; SOURCE LINE # 476
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 500
0000 904800            MOV     DPTR,#04800H
0003 74F1              MOV     A,#0F1H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 502
0006 7B00              MOV     R3,#00H
0008 7A46              MOV     R2,#046H
000A 79E8              MOV     R1,#0E8H
000C 120000      E     LCALL   _cyread8
000F EF                MOV     A,R7
0010 4405              ORL     A,#05H
0012 FD                MOV     R5,A
0013 7B00              MOV     R3,#00H
0015 7A46              MOV     R2,#046H
0017 79E8              MOV     R1,#0E8H
0019 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
001C 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 508
001F 7B01              MOV     R3,#01H
0021 7A50              MOV     R2,#050H
0023 7903              MOV     R1,#03H
0025 120000      E     LCALL   _cyread8
0028 EF                MOV     A,R7
0029 4402              ORL     A,#02H
002B FD                MOV     R5,A
002C 7B01              MOV     R3,#01H
002E 7A50              MOV     R2,#050H
0030 7903              MOV     R1,#03H
0032 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 509
0035 7B01              MOV     R3,#01H
0037 7A50              MOV     R2,#050H
0039 7913              MOV     R1,#013H
003B 120000      E     LCALL   _cyread8
003E EF                MOV     A,R7
003F 4402              ORL     A,#02H
0041 FD                MOV     R5,A
0042 7B01              MOV     R3,#01H
0044 7A50              MOV     R2,#050H
0046 7913              MOV     R1,#013H
0048 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 512
004B 9043A0            MOV     DPTR,#043A0H
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 4440              ORL     A,#040H
0053 FF                MOV     R7,A
0054 9043A0            MOV     DPTR,#043A0H
0057 EF                MOV     A,R7
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
0059 9043C2            MOV     DPTR,#043C2H
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 18  

005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F 4410              ORL     A,#010H
0061 FF                MOV     R7,A
0062 9043C2            MOV     DPTR,#043C2H
0065 EF                MOV     A,R7
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 517
0067 7B08              MOV     R3,#08H
0069 7A10              MOV     R2,#010H
006B 79E0              MOV     R1,#0E0H
006D C003              PUSH    AR3
006F C002              PUSH    AR2
0071 C001              PUSH    AR1
0073 7B00              MOV     R3,#00H
0075 7A51              MOV     R2,#051H
0077 7902              MOV     R1,#02H
0079 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
007C 120000      E     LCALL   ?C?PSTXDATA
007F D001              POP     AR1
0081 D002              POP     AR2
0083 D003              POP     AR3
0085 7F08              MOV     R7,#08H
0087 7E00              MOV     R6,#00H
0089 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 518
008C 7B08              MOV     R3,#08H
008E 7A10              MOV     R2,#010H
0090 79E8              MOV     R1,#0E8H
0092 C003              PUSH    AR3
0094 C002              PUSH    AR2
0096 C001              PUSH    AR1
0098 7B00              MOV     R3,#00H
009A 7A51              MOV     R2,#051H
009C 7912              MOV     R1,#012H
009E 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00A1 120000      E     LCALL   ?C?PSTXDATA
00A4 D001              POP     AR1
00A6 D002              POP     AR2
00A8 D003              POP     AR3
00AA 7F08              MOV     R7,#08H
00AC 7E00              MOV     R6,#00H
00AE 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 519
00B1 7B08              MOV     R3,#08H
00B3 7A10              MOV     R2,#010H
00B5 79F0              MOV     R1,#0F0H
00B7 C003              PUSH    AR3
00B9 C002              PUSH    AR2
00BB C001              PUSH    AR1
00BD 7B00              MOV     R3,#00H
00BF 7A51              MOV     R2,#051H
00C1 79C2              MOV     R1,#0C2H
00C3 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C6 120000      E     LCALL   ?C?PSTXDATA
00C9 D001              POP     AR1
00CB D002              POP     AR2
00CD D003              POP     AR3
00CF 7F08              MOV     R7,#08H
00D1 7E00              MOV     R6,#00H
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 19  

00D3 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 520
00D6 7B08              MOV     R3,#08H
00D8 7A10              MOV     R2,#010H
00DA 79F8              MOV     R1,#0F8H
00DC C003              PUSH    AR3
00DE C002              PUSH    AR2
00E0 C001              PUSH    AR1
00E2 7B00              MOV     R3,#00H
00E4 7A51              MOV     R2,#051H
00E6 79F2              MOV     R1,#0F2H
00E8 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00EB 120000      E     LCALL   ?C?PSTXDATA
00EE D001              POP     AR1
00F0 D002              POP     AR2
00F2 D003              POP     AR3
00F4 7F08              MOV     R7,#08H
00F6 7E00              MOV     R6,#00H
00F8 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 521
00FB 7B08              MOV     R3,#08H
00FD 7A11              MOV     R2,#011H
00FF 7900              MOV     R1,#00H
0101 C003              PUSH    AR3
0103 C002              PUSH    AR2
0105 C001              PUSH    AR1
0107 7B00              MOV     R3,#00H
0109 7A51              MOV     R2,#051H
010B 7922              MOV     R1,#022H
010D 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0110 120000      E     LCALL   ?C?PSTXDATA
0113 D001              POP     AR1
0115 D002              POP     AR2
0117 D003              POP     AR3
0119 7F08              MOV     R7,#08H
011B 7E00              MOV     R6,#00H
011D 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 522
0120 7B08              MOV     R3,#08H
0122 7A11              MOV     R2,#011H
0124 7908              MOV     R1,#08H
0126 C003              PUSH    AR3
0128 C002              PUSH    AR2
012A C001              PUSH    AR1
012C 7B00              MOV     R3,#00H
012E 7A51              MOV     R2,#051H
0130 7942              MOV     R1,#042H
0132 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0135 120000      E     LCALL   ?C?PSTXDATA
0138 D001              POP     AR1
013A D002              POP     AR2
013C D003              POP     AR3
013E 7F08              MOV     R7,#08H
0140 7E00              MOV     R6,#00H
0142 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 523
0145 7B08              MOV     R3,#08H
0147 7A11              MOV     R2,#011H
0149 7910              MOV     R1,#010H
014B C003              PUSH    AR3
014D C002              PUSH    AR2
014F C001              PUSH    AR1
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 20  

0151 7B00              MOV     R3,#00H
0153 7A51              MOV     R2,#051H
0155 7952              MOV     R1,#052H
0157 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
015A 120000      E     LCALL   ?C?PSTXDATA
015D D001              POP     AR1
015F D002              POP     AR2
0161 D003              POP     AR3
0163 7F08              MOV     R7,#08H
0165 7E00              MOV     R6,#00H
0167 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 524
016A 904689            MOV     DPTR,#04689H
016D 743A              MOV     A,#03AH
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0170 904800            MOV     DPTR,#04800H
0173 7431              MOV     A,#031H
0175 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
0176 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 532
0179 904800            MOV     DPTR,#04800H
017C 74B1              MOV     A,#0B1H
017E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
017F 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 538
0182 7B00              MOV     R3,#00H
0184 7A43              MOV     R2,#043H
0186 79A0              MOV     R1,#0A0H
0188 C003              PUSH    AR3
018A C002              PUSH    AR2
018C C001              PUSH    AR1
018E 7B00              MOV     R3,#00H
0190 7A43              MOV     R2,#043H
0192 79B0              MOV     R1,#0B0H
0194 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0197 120000      E     LCALL   ?C?PSTXDATA
019A D001              POP     AR1
019C D002              POP     AR2
019E D003              POP     AR3
01A0 7F0E              MOV     R7,#0EH
01A2 7E00              MOV     R6,#00H
01A4 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 539
01A7 9043B0            MOV     DPTR,#043B0H
01AA E0                MOVX    A,@DPTR
01AB FF                MOV     R7,A
01AC EF                MOV     A,R7
01AD 54FD              ANL     A,#0FDH
01AF FF                MOV     R7,A
01B0 9043B0            MOV     DPTR,#043B0H
01B3 EF                MOV     A,R7
01B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 540
01B5 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/22/2012 15:33:16 PAGE 21  

   CODE SIZE        =    975    ----
   CONSTANT SIZE    =    557    ----
   XDATA SIZE       =      4       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
